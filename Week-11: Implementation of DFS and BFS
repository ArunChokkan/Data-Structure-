
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define QUEUE_SIZE 100

typedef struct Graph {
    int numVertices;
    int** adjacencyMatrix;
    int* visited;
} Graph;

Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    graph->visited = (int*)calloc(numVertices, sizeof(int));
    graph->adjacencyMatrix = (int**)malloc(numVertices * sizeof(int*));
    for (int i = 0; i < numVertices; i++) {
        graph->adjacencyMatrix[i] = (int*)calloc(numVertices, sizeof(int));
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    graph->adjacencyMatrix[src][dest] = 1;
}

void DFSUtil(Graph* graph, int vertex) {
    graph->visited[vertex] = 1;
    printf("%d ", vertex);
    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjacencyMatrix[vertex][i] && !graph->visited[i]) {
            DFSUtil(graph, i);
        }
    }
}

void DFS(Graph* graph) {
    printf("Depth-First Search Traversal: ");
    for (int i = 0; i < graph->numVertices; i++) {
        if (!graph->visited[i]) {
            DFSUtil(graph, i);
        }
    }
    printf("\n");
}

void BFS(Graph* graph, int startVertex) {
    printf("Breadth-First Search Traversal: ");
    int queue[QUEUE_SIZE];
    int front = 0, rear = -1;
    graph->visited[startVertex] = 1;
    queue[++rear] = startVertex;
    while (front <= rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);
        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjacencyMatrix[currentVertex][i] && !graph->visited[i]) {
                graph->visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}

void freeGraph(Graph* graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        free(graph->adjacencyMatrix[i]);
    }
    free(graph->adjacencyMatrix);
    free(graph->visited);
    free(graph);
}

int main() {
    int numVertices;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    Graph* graph = createGraph(numVertices);
    printf("Enter the edges (src dest): \n");
    while (1) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        if (src == -1 || dest == -1)
            break;
        if (src < 0 || src >= numVertices || dest < 0 || dest >= numVertices) {
            printf("Invalid edge: (%d, %d)\n", src, dest);
            continue;
        }
        addEdge(graph, src, dest);
    }

    DFS(graph);

    // Resetting visited array for BFS traversal
    for (int i = 0; i < numVertices; i++) {
        graph->visited[i] = 0;
    }

    printf("Enter the starting vertex for BFS: ");
    int startVertex;
    scanf("%d", &startVertex);
    BFS(graph, startVertex);

    freeGraph(graph);
    return 0;
}
